apiVersion: apps/v1
kind: Deployment
metadata:
  name: otelbackend
spec:
  selector:
    matchLabels:
      app: otelbackend
  template:
    metadata:
      labels:
        app: otelbackend
    spec:
      # Init container retrieves the current cloud project id from the metadata server
      # and inserts it into the collector config template
      # https://cloud.google.com/compute/docs/storing-retrieving-metadata
      initContainers:
      - name: otel-gateway-init
        image: gcr.io/google.com/cloudsdktool/cloud-sdk:326.0.0-alpine
        command:
        - '/bin/bash'
        - '-c'
        - |
           sed "s/{{PROJECT_ID}}/$(curl -H 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/project/project-id)/" /template/collector-backend-config-template.yaml >> /conf/collector-gateway-config.yaml
        volumeMounts:
        - name: collector-backend-config-template
          mountPath: /template
        - name: collector-gateway-config
          mountPath: /conf
      containers:
      - name: otelbackend
        args:
        - --config=/conf/collector-gateway-config.yaml
        image: jessberg/snicket3:latest #jessberg/cloudstoragepermicroservicecollector:latest
        imagePullPolicy: Always
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/key.json
        volumeMounts:
        - name: collector-gateway-config
          mountPath: /conf
        - name: google-cloud-key
          mountPath: /var/secrets/google
      volumes:
      # Simple ConfigMap volume with template file
      - name: collector-backend-config-template
        configMap:
          items:
          - key: collector-backend-config-template.yaml
            path: collector-backend-config-template.yaml
          name: collector-backend-config-template
      # Create a volume to store the expanded template (with correct cloud project ID)
      - name: collector-gateway-config
        emptyDir: {}
      - name: google-cloud-key
        secret:
          secretName: pubsub-key
---
apiVersion: v1
kind: Service
metadata:
  name: otelbackend
spec:
  type: ClusterIP
  selector:
    app: otelbackend
  ports:
  - name: "1888"
    port: 1888
    targetPort: 1888
  - name: "8080"
    port: 8080
    targetPort: 8080
  - name: "8888"
    port: 8888
    targetPort: 8888
  - name: "8889"
    port: 8889
    targetPort: 8889
  - name: "13133"
    port: 13133
    targetPort: 13133
  - name: "4317"
    port: 4317
    targetPort: 4317
  - name: "55670"
    port: 55670
    targetPort: 55670

---                                                                             
apiVersion: v1                                                                  
kind: ConfigMap                                                                 
metadata:                                                                       
  name: collector-backend-config-template                                       
# Open Telemetry Collector config                                               
# https://opentelemetry.io/docs/collector/configuration/                        
data:                                                                           
  collector-backend-config-template.yaml: |                                     
    extensions:
      zpages:
    receivers:                                                                  
      otlp:                                                                     
        protocols:                                                              
          grpc:                                                                 
    processors:
      groupbytrace/custom:
        wait_duration: 10s
        num_traces: 1000000
        num_workers: 15
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 30
      batch:
        send_batch_size: 20000
        send_batch_max_size: 40000
        timeout: 5s
      groupbyattrs:

    exporters:                                                                  
      logging:
      jaeger:
        endpoint: "jaeger:14250"
        tls:
          insecure: true
        sending_queue:
          enabled: true
          num_consumers: 100
          queue_size: 150000
      googlecloudstorage/customname:                                            
        project: dynamic-tracing                                                
        user_agent: opentelemetry-collector-contrib {{version}}                 
        insecure: true                                                          
        timeout: 5s                                                             
        retry_on_failure:                                                       
          enabled: true                                                         
          initial_interval: 1s                                                  
        sending_queue:                                                          
          enabled: true                                                         
          num_consumers: 100                                                    
          queue_size: 1000


    service:                                                                    
      extensions: [zpages]
      pipelines:                                                                
        traces:                                                                 
          receivers: [otlp] # Receive otlp-formatted data from other collector instances
          processors: [memory_limiter, groupbytrace/custom, batch, groupbyattrs]
          exporters: [logging, jaeger, googlecloudstorage/customname]
